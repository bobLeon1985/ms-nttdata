/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bce.services.server;

import com.bce.services.server.models.ClienteDTO;
import com.bce.services.server.models.RespuestaDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-06-24T16:26:04.900880900-05:00[America/Guayaquil]", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "Client", description = "Client")
public interface ClientsApi {

    /**
     * PUT /clients : Actualizar cliente
     * Actualizar cliente
     *
     * @param clienteDTO Cliente (required)
     * @return Updated (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "actualizarCliente",
        summary = "Actualizar cliente",
        description = "Actualizar cliente",
        tags = { "Client" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json; charset=UTF-8", schema = @Schema(implementation = RespuestaDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json; charset=UTF-8", schema = @Schema(implementation = RespuestaDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json; charset=UTF-8", schema = @Schema(implementation = RespuestaDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clients",
        produces = { "application/json; charset=UTF-8" },
        consumes = { "application/json; charset=UTF-8" }
    )
    
    default Mono<ResponseEntity<Void>> _actualizarCliente(
        @Parameter(name = "ClienteDTO", description = "Cliente", required = true) @Valid @RequestBody Mono<ClienteDTO> clienteDTO,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return actualizarCliente(clienteDTO, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<Void>> actualizarCliente(Mono<ClienteDTO> clienteDTO,  final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=UTF-8"))) {
                String exampleString = "{ \"descripcion\" : \"descripcion\", \"codigoRespuesta\" : \"codigoRespuesta\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=UTF-8"))) {
                String exampleString = "{ \"descripcion\" : \"descripcion\", \"codigoRespuesta\" : \"codigoRespuesta\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=UTF-8"))) {
                String exampleString = "{ \"descripcion\" : \"descripcion\", \"codigoRespuesta\" : \"codigoRespuesta\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(clienteDTO).then(Mono.empty());

    }


    /**
     * GET /clients/{identificacion} : Consultar cliente por identificaci贸n
     * Consultar cliente por identificaci贸n
     *
     * @param identificacion  (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "consultarClientePorIdentificacion",
        summary = "Consultar cliente por identificaci贸n",
        description = "Consultar cliente por identificaci贸n",
        tags = { "Client" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json; charset=UTF-8", schema = @Schema(implementation = ClienteDTO.class))
            }),
            @ApiResponse(responseCode = "204", description = "No Content", content = {
                @Content(mediaType = "application/json; charset=UTF-8", schema = @Schema(implementation = RespuestaDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json; charset=UTF-8", schema = @Schema(implementation = RespuestaDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json; charset=UTF-8", schema = @Schema(implementation = RespuestaDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/{identificacion}",
        produces = { "application/json; charset=UTF-8" }
    )
    
    default Mono<ResponseEntity<ClienteDTO>> _consultarClientePorIdentificacion(
        @Parameter(name = "identificacion", description = "", required = true, in = ParameterIn.PATH) @PathVariable("identificacion") String identificacion,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return consultarClientePorIdentificacion(identificacion, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<ClienteDTO>> consultarClientePorIdentificacion(String identificacion,  final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=UTF-8"))) {
                String exampleString = "{ \"estado\" : true, \"genero\" : \"genero\", \"direccion\" : \"direccion\", \"identificacion\" : \"identificacion\", \"contrasenia\" : \"contrasenia\", \"telefono\" : \"telefono\", \"edad\" : 0, \"nombres\" : \"nombres\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=UTF-8"))) {
                String exampleString = "{ \"descripcion\" : \"descripcion\", \"codigoRespuesta\" : \"codigoRespuesta\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=UTF-8"))) {
                String exampleString = "{ \"descripcion\" : \"descripcion\", \"codigoRespuesta\" : \"codigoRespuesta\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=UTF-8"))) {
                String exampleString = "{ \"descripcion\" : \"descripcion\", \"codigoRespuesta\" : \"codigoRespuesta\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /clients : Consultar listado de clientes activos
     * Consultar listado de clientes activos
     *
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "consultarClientes",
        summary = "Consultar listado de clientes activos",
        description = "Consultar listado de clientes activos",
        tags = { "Client" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json; charset=UTF-8", array = @ArraySchema(schema = @Schema(implementation = ClienteDTO.class)))
            }),
            @ApiResponse(responseCode = "204", description = "No Content", content = {
                @Content(mediaType = "application/json; charset=UTF-8", schema = @Schema(implementation = RespuestaDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json; charset=UTF-8", schema = @Schema(implementation = RespuestaDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json; charset=UTF-8", schema = @Schema(implementation = RespuestaDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients",
        produces = { "application/json; charset=UTF-8" }
    )
    
    default Mono<ResponseEntity<Flux<ClienteDTO>>> _consultarClientes(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return consultarClientes(exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<Flux<ClienteDTO>>> consultarClientes( final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=UTF-8"))) {
                String exampleString = "[ { \"estado\" : true, \"genero\" : \"genero\", \"direccion\" : \"direccion\", \"identificacion\" : \"identificacion\", \"contrasenia\" : \"contrasenia\", \"telefono\" : \"telefono\", \"edad\" : 0, \"nombres\" : \"nombres\" }, { \"estado\" : true, \"genero\" : \"genero\", \"direccion\" : \"direccion\", \"identificacion\" : \"identificacion\", \"contrasenia\" : \"contrasenia\", \"telefono\" : \"telefono\", \"edad\" : 0, \"nombres\" : \"nombres\" } ]";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=UTF-8"))) {
                String exampleString = "{ \"descripcion\" : \"descripcion\", \"codigoRespuesta\" : \"codigoRespuesta\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=UTF-8"))) {
                String exampleString = "{ \"descripcion\" : \"descripcion\", \"codigoRespuesta\" : \"codigoRespuesta\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=UTF-8"))) {
                String exampleString = "{ \"descripcion\" : \"descripcion\", \"codigoRespuesta\" : \"codigoRespuesta\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * POST /clients : Crear nuevo cliente
     * Crear nuevo cliente
     *
     * @param clienteDTO Cliente (required)
     * @return OK (status code 201)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "crearCliente",
        summary = "Crear nuevo cliente",
        description = "Crear nuevo cliente",
        tags = { "Client" },
        responses = {
            @ApiResponse(responseCode = "201", description = "OK"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json; charset=UTF-8", schema = @Schema(implementation = RespuestaDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json; charset=UTF-8", schema = @Schema(implementation = RespuestaDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clients",
        produces = { "application/json; charset=UTF-8" },
        consumes = { "application/json; charset=UTF-8" }
    )
    
    default Mono<ResponseEntity<Void>> _crearCliente(
        @Parameter(name = "ClienteDTO", description = "Cliente", required = true) @Valid @RequestBody Mono<ClienteDTO> clienteDTO,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return crearCliente(clienteDTO, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<Void>> crearCliente(Mono<ClienteDTO> clienteDTO,  final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=UTF-8"))) {
                String exampleString = "{ \"descripcion\" : \"descripcion\", \"codigoRespuesta\" : \"codigoRespuesta\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=UTF-8"))) {
                String exampleString = "{ \"descripcion\" : \"descripcion\", \"codigoRespuesta\" : \"codigoRespuesta\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(clienteDTO).then(Mono.empty());

    }


    /**
     * DELETE /clients/{id} : Eliminar cliente por ID
     * Eliminar cliente por ID
     *
     * @param id  (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or Bad Request (status code 400)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "eliminarCliente",
        summary = "Eliminar cliente por ID",
        description = "Eliminar cliente por ID",
        tags = { "Client" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "204", description = "No Content", content = {
                @Content(mediaType = "application/json; charset=UTF-8", schema = @Schema(implementation = RespuestaDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json; charset=UTF-8", schema = @Schema(implementation = RespuestaDTO.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json; charset=UTF-8", schema = @Schema(implementation = RespuestaDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/clients/{id}",
        produces = { "application/json; charset=UTF-8" }
    )
    
    default Mono<ResponseEntity<Void>> _eliminarCliente(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return eliminarCliente(id, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<Void>> eliminarCliente(Integer id,  final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=UTF-8"))) {
                String exampleString = "{ \"descripcion\" : \"descripcion\", \"codigoRespuesta\" : \"codigoRespuesta\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=UTF-8"))) {
                String exampleString = "{ \"descripcion\" : \"descripcion\", \"codigoRespuesta\" : \"codigoRespuesta\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json; charset=UTF-8"))) {
                String exampleString = "{ \"descripcion\" : \"descripcion\", \"codigoRespuesta\" : \"codigoRespuesta\" }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
